from typing import Optional
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.reply import reply_keyboard_manager, default_keyboard
from states.states_form import Registration, ChangeName
from data.config import BASE_URL
from services.manager_api_service import ManagerApiService
from dto.manager import ManagerDTO

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext) -> None:
    service = ManagerApiService(base_url=BASE_URL, endpoint="managers")
    tg_id = message.from_user.id
    manager: Optional[ManagerDTO] = await service.get_manager_by_id(id=tg_id)

    if manager:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç {manager.username}, —è –±–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.\n"
            + '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –≤–Ω–∏–∑—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" ',
            reply_markup=default_keyboard,
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,—è –±–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.\n"
            + "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.set_state(Registration.name)


@router.message(F.text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def work_menu(message: Message) -> None:
    service = ManagerApiService(base_url=BASE_URL, endpoint="managers")
    tg_id = message.from_user.id

    manager = await service.get_manager_by_id(id=tg_id)

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ {manager["name"]}, —Ç–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        reply_markup=reply_keyboard_manager(manager["role"]),
    )


@router.message(F.text == "üñä –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_name(message: Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(ChangeName.name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@router.message(
    StateFilter(ChangeName.name), lambda x: x.text.isalpha() and (2 < len(x.text) <= 10)
)
async def change_manager_name(message: Message, state: FSMContext) -> None:
    await state.clear()

    service = ManagerApiService(base_url=BASE_URL, endpoint="managers")
    tg_id = message.from_user.id

    updated_name = message.text.strip().capitalize()
    upload_data = {"name": updated_name}

    try:
        manager = await service.update_manager_name(id=tg_id, data=upload_data)
        await message.answer(
            f"{manager["name"]}, –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ!",
            reply_markup=default_keyboard,
        )
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è! {str(e)}",
            reply_markup=default_keyboard,
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(
    StateFilter(Registration.name),
    lambda x: x.text.isalpha() and (2 < len(x.text) <= 10),
)
async def registration(message: Message, state: FSMContext) -> None:
    await state.clear()

    service = ManagerApiService(base_url=BASE_URL, endpoint="managers")
    tg_id = message.from_user.id

    register_name = message.text.strip().capitalize()
    upload_data = {
        "tg_id": tg_id,
        "username": message.from_user.first_name,
        "name": register_name,
    }

    manager = await service.create_manager(data=upload_data)

    if manager:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç {manager["name"]}, —è –±–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.\n"
            + '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –≤–Ω–∏–∑—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" ',
            reply_markup=default_keyboard,
        )
        return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
@router.message(StateFilter(ChangeName.name, Registration.name))
async def not_correct_name(message: Message) -> None:
    await message.answer(
        "‚õîÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚õîÔ∏è\n –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–ª–∏–Ω–µ–µ 10, –∞ —Ç–∞–∫–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "
        "—Ü–∏—Ñ—Ä!\n" + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:"
    )
