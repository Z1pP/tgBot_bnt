from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder


from core.filters.admin_filter import IsAdmin
from loader import db

router = Router()

@router.message(F.text == 'üë§ –í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞',IsAdmin())
async def give_admin_root(message: Message):
    managers = db.get_managers()
    
    kb = InlineKeyboardBuilder()
    
    if len(managers) > 1:
        for manager in managers:
            kb.button(text= manager[2], callback_data=f'id_{manager[0]}')

        kb.adjust(2)

    else:
        kb.button(text='–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç', callback_data='no_managers')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', 
                         reply_markup=kb.as_markup(resize_keyboard=True, 
                                                   one_time_keyboard=True))


@router.message(F.text == 'üë§ –í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞',~IsAdmin())
async def no_rights(message: Message):
    await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞!')


# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ –±–æ—Ç–∞
@router.message(F.text == '!—Å–æ–Ω', IsAdmin())
async def show_time_until_notification(message:Message):
    import pytz
    from datetime import datetime, timedelta

    belarus_tz = pytz.timezone('Europe/Minsk')

    start_time = belarus_tz.localize(datetime.now().replace(hour=18, minute=50, second=0, microsecond=0))
    end_time = belarus_tz.localize(datetime.now().replace(hour=23, minute=30, second=0, microsecond=0))
    current_time = datetime.now(tz=belarus_tz)

    current_day = current_time.weekday()
    if current_day not in [0, 1, 2, 3, 4]:
        await message.answer('–ë–æ—Ç —Å–ø–∏—Ç! –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π' )
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∏—Å–∞–ª —Å 16:50 –¥–æ 23:30
    if not start_time.time() <= current_time.time() <= end_time.time():
        time_sleep = start_time - current_time
        if time_sleep.total_seconds() > 0:
            hours, remainder = divmod(int(time_sleep.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f'–ë–æ—Ç —Å–ø–∏—Ç! –ü—Ä–æ—Å–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥')
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            next_day_start_time = start_time + timedelta(days=1)
            time_sleep = next_day_start_time - current_time
            hours, remainder = divmod(int(time_sleep.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f'–ë–æ—Ç —Å–ø–∏—Ç! –ü—Ä–æ—Å–Ω–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥')
    else:
        await message.answer('–ë–æ—Ç –Ω–µ —Å–ø–∏—Ç!')

