from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from core.states.states_form import ReportState
from core.keyboards.inline import get_keyboard
from core.keyboards.inline_date import get_keyboard_date
from core.keyboards.reply import reply_keyboard_manager
from core.filters.admin_filter import IsSuperManager
from loader import db, dp

router = Router()

@router.message(F.text == 'üìë –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç')
async def start_create_report(message:Message) -> None:

    await message.answer('–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á–µ—Ç?', 
                         reply_markup= get_keyboard(key='filling_form'))


async def create_report(message: Message, state: FSMContext) -> None:
    await state.update_data(manager = dp.manager)
    
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:')
    await state.set_state(ReportState.orders)


@router.message(StateFilter(ReportState.orders),
                lambda x: x.text.isdigit() and 0 <= int(x.text) <= 50)
async def get_orders(message: Message, state: FSMContext) -> None:
    await state.update_data(orders = message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:')
    await state.set_state(ReportState.invoices)


@router.message(StateFilter(ReportState.orders))
async def orders_not_digit(message: Message) -> None:
    await message.answer('‚õîÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚õîÔ∏è\n –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n' +
                         '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ...\n' +
                         '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:')


@router.message(StateFilter(ReportState.invoices),
                lambda x: x.text.isdigit() and 0 <= int(x.text) <= 50)
async def get_invoices(message: Message, state: FSMContext) -> None:
    await state.update_data(invoices = message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:')
    await state.set_state(ReportState.paid)


@router.message(StateFilter(ReportState.invoices))
async def invoices_not_digit(message: Message) -> None:
    await message.answer('‚õîÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚õîÔ∏è\n –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n' +
                         '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ...\n' +
                         '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:')


@router.message(StateFilter(ReportState.paid),
                lambda x: x.text.isdigit() and 0 <= int(x.text) <= 50)
async def get_payments(message: Message, state: FSMContext) -> None:
    await state.update_data(paid = message.text)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∂—É:')
    await state.set_state(ReportState.margin)


@router.message(StateFilter(ReportState.paid))
async def paid_not_digit(message: Message) -> None:
    await message.answer('‚õîÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚õîÔ∏è\n –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n' +
                         '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ...\n' +
                         '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:')
    

@router.message(StateFilter(ReportState.margin), 
                lambda x: (x.text.isdigit() or x.text.isnumeric()) and int(x.text) >= 0)
async def get_margine(message: Message, state: FSMContext) -> None:
    await state.update_data(margin = message.text)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –≤—ã—Ä—É—á–∫—É:')
    await state.set_state(ReportState.revenue)


@router.message(StateFilter(ReportState.margin))
async def margin_not_digit_and_not_less_zero(message: Message) -> None:
    await message.answer('‚õîÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚õîÔ∏è\n –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n' +
                         '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ...\n' +
                         '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –º–∞—Ä–∂—É:')


@router.message(ReportState.revenue, F.text)
async def get_revenue(message: Message, state: FSMContext) -> None:
    await state.update_data(revenue = message.text)

    await message.answer('–†–∞—Å—Å—á–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º—Å —Å –ù–î–° —Ä–∞–≤–Ω—ã–º 1.2?',
                         reply_markup=get_keyboard(key='nds'))
    await state.set_state(ReportState.nds)


@router.message(ReportState.nds, F.text)
async def get_nds(message: Message, state: FSMContext) -> None:
    await state.update_data(nds = message.text)

    await check_report_is_correct(message, state)


async def check_report_is_correct(message: Message, state: FSMContext) -> None:
    global data_state
    data_state = await state.get_data()

    answer_text = f'''
    –ó–∞–∫–∞–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ - {data_state['orders']},
    –°—á–µ—Ç–æ–≤ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ - {data_state['invoices']},
    –ó–∞–∫–∞–∑–æ–≤ –æ–ø–ª–∞—á–µ–Ω–Ω–æ - {data_state['paid']},
    –ú–∞—Ä–∂–∞ - {data_state['margin']},
    –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ - {data_state['revenue']},
    –ù–î–° - {data_state['nds']}'''

    await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n' + answer_text,
                         reply_markup=get_keyboard(key='check_report'))
    await state.clear()


async def save_report(message: Message) -> None:
    report = dp.manager.create_report(data=data_state)

    #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_report_to_db(report=report)

    text = '''
    ‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
    –û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞'''
    
    await message.answer(text, reply_markup= reply_keyboard_manager(manager=dp.manager))


@router.message(F.text == 'üìÅ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤', IsSuperManager())
async def get_report_list(message: Message):
    #–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    report_list = db.get_report_list()

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç—á–µ—Ç–æ–≤
    if not report_list:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤!')
        return
    
    answer  = get_report_for_answer(report_list) 
    #–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–æ–≤
    reports_count = len(report_list)

    #–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    await message.answer(f'–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {str(reports_count)}\n' 
                         + '-' * 50 +'\n'
                         + '\n\n'.join(answer))


@router.message(F.text == 'üìÖ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç—ã –ø–æ –¥–∞—Ç–µ', IsSuperManager())
async def get_report_by_date(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:',
                         reply_markup=get_keyboard_date())


async def get_report_by_date_from_db(message: Message, date: str):
    report_list = db.get_report_list_by_date(date)
    
    answer = get_report_for_answer(report_list)

    reports_count = len(report_list)

    #–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    await message.answer(f'–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {str(reports_count)}\n' 
                         + '-' * 50 +'\n'
                         + '\n\n'.join(answer))
    


def report_dict_to_string(report_dict: dict) -> str:
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    string = "\n".join(f"{k}: {v}%" if k == "–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏" else f"{k}: {v}" for k, v in report_dict.items())
    return string



def get_report_for_answer(report_list: list) -> list:
    answer = []
    #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 
    for report in report_list:
        answer.append(
            report_dict_to_string(
                report_dict= dp.manager.report_list_to_dict(report_from_db=report)
                )
            )
    return answer
