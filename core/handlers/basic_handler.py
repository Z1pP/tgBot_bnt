import random
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

from loader import db, dp
from core.keyboards.reply import reply_keyboard_manager, default_keyboard
from entities.managers import Manager, SuperManager
from core.states.states_form import Registration

router = Router()


@router.startup()
async def database_initialization():
    print('Database initialized')
    print('Bot is running!')


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤ Manager –∏ SuperManager
@router.message(CommandStart())
async def start(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = db.get_manager_to_id(id=user_id)
    if user:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {user[0][2]}, —è –±–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.\n' +
                             '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –≤–Ω–∏–∑—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" ',
                             reply_markup=default_keyboard)
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,—è –±–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.\n' +
                             '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è:')
        await state.set_state(Registration.name)


@router.message(F.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
async def work_menu(message: Message) -> None:
    tg_name = message.from_user.first_name
    tg_id = str(message.from_user.id)

    user = db.get_manager_to_id(id=tg_id)

    if not user:
        manager = Manager(name=register_name, nickname=tg_name, id=tg_id)
        db.add_managers_to_db(manager=manager)
    else:
        manager_role = user[0][3]
        name = user[0][2]

        if manager_role == 'Manager':
            manager = Manager(name=name, nickname=tg_name, id=tg_id)
        else:
            manager = SuperManager(name=name, nickname=tg_name, id=tg_id)

    dp.manager = manager
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ {manager.name}, —Ç–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
                         reply_markup=reply_keyboard_manager(manager))


@router.message(F.text == 'üñä –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
async def change_name(message: Message, state: FSMContext) -> None:
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
    await state.set_state(Registration.name)


@router.message(F.text == '/number')
async def get_random_number(message: Message) -> None:
    number = random.randint(0, 101)
    await message.reply(str(number))


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(Registration.name),
                lambda x: x.text.isalpha() and (2 < len(x.text) <= 10))
async def registration(message: Message, state: FSMContext) -> None:
    global register_name
    register_name = message.text.strip().capitalize()

    manager = db.get_manager_to_id(id=message.from_user.id)
    manager_id = manager[0][0]
    if manager:
        db.change_manager_name(new_name=register_name, id=manager_id)

    await state.clear()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {register_name}, —è –±–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.\n' +
                         '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –≤–Ω–∏–∑—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" ',
                         reply_markup=default_keyboard)


@router.message(StateFilter(Registration.name))
async def not_correct_name(message: Message) -> None:
    await message.answer('‚õîÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚õîÔ∏è\n –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–ª–∏–Ω–µ–µ 10, –∞ —Ç–∞–∫–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '
                         '—Ü–∏—Ñ—Ä!\n' + '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:')
